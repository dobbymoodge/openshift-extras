#!/usr/bin/env ruby
# The 1.1 => 1.2 upgrade is particularly tricky because we can't rely on the
# ruby193 scl being installed until we've performed the first part of the upgrade.
# So, use the system ruby.

#--
# Copyright 2013 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#++

# Options parsing...
#
require 'optparse'
options = {
  :number => 1,
  :wait => 2,
  :verbose => true,
}
optparse = OptionParser.new do |opts|
  opts.banner = <<-"USAGE"
    #{$0}: Upgrade OpenShift Enterprise systems

    Usage: #{$0} [--switches] [status|all|<step>]
    Example: #{$0}
    Example: #{$0} status
    Example: #{$0} all
    Example: #{$0} -q channels 

    Switches:
  USAGE

  opts.on('-s','--skip', 'Mark step complete rather than run it') { |o| options[:skip] = o }
  opts.on('-q','--quiet', 'Only display warnings and failures') { |o| options[:verbose] = false }
  opts.on('-d','--debug', 'Enable extra debugging output') { |o| options[:verbose] = options[:debug] = true }
  opts.on('-n','--number INTEGER', 'Upgrade number to perform') { |number| options[:number] = number.to_i }
  opts.on('-h','--help', 'Print usage') { puts opts; exit 0 }
end

begin
  optparse.parse!
  options[:command] = ARGV.shift || 'status'
rescue OptionParser::InvalidArgument => e
  puts "\n ##### #{e.message} #####"
  puts optparse.to_s
  puts "\n ##### #{e.message} #####"
  puts
  exit 1
end

#
# execute
#
require 'ose-upgrade/main'
o = OSEUpgrader::Main.new(options)
exitcode = o.run_upgrade
exit exitcode
