#!/usr/bin/env ruby

#####################################################################
# bootstrap our devops/onprem builder

$: << File.expand_path(File.dirname(__FILE__))
require 'dev_tools_constants'

DEVTOOLS_REPO = File.join('lib', '..', '..', '..', "#{DEV_TOOLS_REPO}")

require 'rubygems'
require 'thor'
require 'fileutils'
require File.join(DEVTOOLS_REPO, 'build', 'lib', 'openshift')
require 'pp'
require 'yaml'
require File.join(DEVTOOLS_REPO, 'build', 'builder')

include FileUtils

######################################################################
#
# Define the options available for the onprem builder

module DevOps
  class BuilderPlugin < OpenShift::Builder
    include OpenShift::BuilderHelper

    ######################################################################
    #
    # Supporting methods go here

    no_tasks do

      # launch also calls this to perform some kind of validation of instance state
      def validate_instance(hostname, num_tries=2)
        # here we will check that it has access to the yum repos
        puts "Validating instance..."

        validation_output = ssh(hostname, 'yum info openshift-origin-broker --cacheonly', 30)
        if validation_output =~ /Name\s*:\s*openshift-origin-broker/
          puts "Instance is valid."
        else
          puts "ERROR - instance is not valid"
          puts "Node Acceptance Output:"
          puts validation_output
          exit 1
        end
      end
      
      def restart_services()
        run("service mcollective restart; service rhc-broker restart; service rhc-site restart", :verbose => options.verbose?)
      end
      
      def sync_impl(name, options)

        hostname = get_host_by_name_or_tag(name, options)

        # get the necessary repos cloned out to the instance
        clone_commands, working_dirs = sync_available_sibling_repos(hostname)
        update_remote_tests(hostname)

        if !options.skip_build?
          puts "Performing remote install...."
          output, exit_code = ssh(hostname, %{
##################
# Start shell code

set -e
#{options.clean_metadata? ? 'yum clean metadata' : ''}
rm -rf #{working_dirs}

#{clone_commands}

pushd #{DEV_TOOLS_EXT_REPO} > /dev/null
  build/devenv update#{options.verbose? ? ' --verbose' : ''} #{options.clean_metadata? ? ' --include_stale' : ''} 2>&1
popd > /dev/null

rm -rf #{working_dirs}
#{options.clean_metadata? ? "yum update -y rhc* *openshift* 2>&1;" : ''}

# End shell code
################
}, 900, true)

          if exit_code != 0
            puts "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            puts "Build failed!  Exiting."
            puts output
            puts "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            exit 1
          end
          puts "Done"
        end
      end
      
      def build_impl(name, build_num, image, conn, options)
        puts "Launching instance of AMI: #{image.id} - #{image.name}"
        instance = launch_instance(image, name + '_' + build_num)
        hostname = instance.dns_name

        puts "Building on: #{hostname}"

        begin
          manifest = nil
          begin
            puts "Updating all packages on the system..."
            output = ssh(hostname, "yum update -y --exclude='rhc*'", 1800)
            puts "Done"

            print_highlighted_output('Update Output', output)

            if options.install_required_packages?
              output, exit_code = ssh(hostname, "yum -y install openssh-clients", 240, true)
              print_highlighted_output('Install OpenSSH Clients Output', output)
              exit 1 unless exit_code == 0
            end

            if options.reboot?
              reboot(instance)
            end

            puts "Uploading devenv script..."
            script_path = File.expand_path(File.dirname(__FILE__) + "/../misc/devenv/setup-devenv-repos.sh")
            scp_to(hostname, script_path, "~/")
            puts "Done"

            if options.install_required_packages?
              puts "Uploading yum client certificates..."
              pem_path = File.expand_path(File.dirname(__FILE__) + "/../misc/client-cert.pem")
              scp_to(hostname, pem_path, "/var/lib/yum/")
              pem_path = File.expand_path(File.dirname(__FILE__) + "/../misc/client-key.pem")
              scp_to(hostname, pem_path, "/var/lib/yum/")
              scp_to(hostname, "misc/devenv/root/.ssh/*", "/root/.ssh/")
              ssh(hostname, "chmod 0600 /root/.ssh/id_rsa; chmod 0644 /root/.ssh/id_rsa.pub /root/.ssh/known_hosts;")
              puts "Done"
            end

            ssh(hostname, "/bin/bash ~/setup-devenv-repos.sh #{options.yum_repo} #{BASE_RELEASE_BRANCH};")

            output = ''
            clone_commands = repo_clone_commands(hostname)
            cmd = "set -ex;"
            if options.install_from_source? || options.install_from_local_source?
              if options.install_from_source?
                puts "Performing clean install from source..."
              elsif options.install_from_local_source?
                puts "Performing clean install from local source..."
              end
              init_repos(hostname)
              sync_repos(hostname) if options.install_from_local_source?
              cmd += "#{clone_commands}\n"
              cmd += "mkdir -p /tmp/tito;"
              SIBLING_REPOS.each_key do |repo_name|
                cmd += "pushd /root/#{repo_name}; git checkout #{options.branch}; popd;"
              end if options.install_from_source?

              cmd += %{

pushd /root/#{DEV_TOOLS_EXT_REPO} > /dev/null
  echo "Building all specs on the server..."
  build/devenv find_and_build_specs 2>&1
popd > /dev/null

mkdir /root/devenv-local/

cat > /etc/yum.repos.d/local.repo <<EOF
[devenv-local]
name=devenv-local
baseurl=file:///root/devenv-local/
enabled=0
gpgcheck=0
priority=1
EOF

cp /tmp/tito/x86_64/*.rpm /root/devenv-local/
cp /tmp/tito/noarch/*.rpm /root/devenv-local/
createrepo /root/devenv-local/

#TODO
#yum -y install rhc-devenv --enablerepo=devenv-local 2>&1
pushd /root/devenv-local/
  yum install -y *.rpm --exclude=*openshift-origin-auth-kerberos
popd

pushd /root/#{DEV_TOOLS_EXT_REPO} > /dev/null
  build/devenv write_sync_history 2>&1
popd > /dev/null

rm -rf /tmp/tito; mkdir -p /root/.source_build;
}
              SIBLING_REPOS.each_key do |repo_name|
                cmd += "rm -rf /root/#{repo_name}-bare; rm -rf /root/.source_build/#{repo_name}; mv /root/#{repo_name} /root/.source_build/#{repo_name};"
              end
            elsif options.install_required_packages?
              puts "Installing bootstrap packages..."
              output, exit_code = ssh(hostname, "yum clean metadata; yum update -y; yum -y install git tito ruby rubygems rubygem-thor rubygem-parseconfig rubygem-json rubygem-aws-sdk createrepo yum-priorities", 600, true)
              print_highlighted_output('Install Bootstrap Packages Output', output)
              exit 1 unless exit_code == 0
              puts "Done"

              puts "Installing requires..."
              init_repos(hostname)
              cmd += %{

#{clone_commands}

# Enable RHUI JBoss repos for cartridge rebase on core EAP packages
yum -y install rh-amazon-rhui-client-jbeap6
              
# Enable RHUI JB EWS repos for Tomcat cartridge
yum -y install rh-amazon-rhui-client-jbews1
                
# Install the 32 bit java before anything else
yum -y install java-1.6.0-openjdk.i686 java-1.6.0-openjdk-devel.i686
yum -y remove java-1.6.0-openjdk.x86_64
set +e
rpm -e --nodeps java-1.7.0-openjdk java-1.7.0-openjdk-devel
set -e
yum -y install java-1.7.0-openjdk.i686 java-1.7.0-openjdk-devel.i686

pushd #{DEV_TOOLS_EXT_REPO}
  build/devenv install_required_packages 2>&1
popd
}
              SIBLING_REPOS.each_key do |repo_name|
                cmd += "rm -rf /root/#{repo_name}; rm -rf /root/#{repo_name}-bare;"
              end
            else
              puts "Performing clean install with the latest code..."
              #TODO
              #cmd += "yum -y install rhc-devenv;"
            end
                  
            output, exit_code = ssh(hostname, cmd, 3600, true)
            puts "Done"

            print_highlighted_output('Install Output', output)

            exit exit_code unless exit_code == 0

            validate_instance(hostname, 4) unless options.install_required_packages?

            manifest = rpm_manifest(hostname)
          rescue SystemExit => e
            download_artifacts(hostname) if options.terminate? || options.official?
            raise
          end

          output = ssh(hostname, "yum list installed", 120)

          print_highlighted_output('Installed Packages', output)

          unless options.install_required_packages?
            puts "Uploading openshift-amz.sh script..."
            script_path = File.expand_path(File.dirname(__FILE__) + "/../amazon/openshift-amz.sh")
            scp_to(hostname, script_path, "~/")
            puts "Done"

            puts "Running openshift-amz.sh..."
            out, ret = ssh(hostname, "/bin/bash ~/openshift-amz.sh 2>&1", 60 * 30, true)
            print_highlighted_output('openshift-amz.sh Output', out)
            print_and_exit(ret, out) if ret != 0
            puts "Done"
            
            puts "Validating...."
            #TODO Temporary workaround
            out, ret = ssh(hostname, "gem install term-ansicolor; service openshift-broker restart", 60 * 30, true, 10)
            print_and_exit(ret, out) if ret != 0
            #out, ret = ssh(hostname, "oo-accept-node; oo-accept-broker", 60 * 30, true, 10)
            #print_and_exit(ret, out) if ret != 0
            puts "Done"
          end

          image_id = nil
          if options.register?
            image = register_image(conn, instance, name + '_' + build_num, manifest)
            image_id = image.id
          end

          unless options.skip_verify? || options.install_required_packages?
            scp_remote_tests(hostname, options.branch)
            test_impl(name + '_' + build_num, hostname, instance, conn, options, image_id)
          end
        ensure
          terminate_instance(instance) if options.terminate?
        end
      end
      
      def update_cucumber_tests(hostname, repo_parent_dir="/root", user="root")
        ssh(hostname, "cp -n #{repo_parent_dir}/openshift-test/controller/test/cucumber/*.feature #{repo_parent_dir}/openshift-test/tests/. ", 60, false, 2, user)
      end
      
      def setup_verifier(hostname, branch)
        print "Initializing git repo for syncing..."
        init_repos(hostname)
        puts "Done"
        update_remote_tests(hostname, branch)
      end
      
      def test_impl(tag, hostname, instance, conn, options, image_id=nil)
      end
      
      def update_facts_impl(hostname)
        #TODO
      end
      
      def rpm_manifest(hostname, sshuser="root")
        print "Retrieving RPM manifest.."
        manifest = ssh(hostname, 'rpm -qa | grep -E "(openshift)" | grep -v cartridge', 60, false, 1, sshuser)
        manifest = manifest.split("\n").sort.join(" / ")
        # Trim down the output to 255 characters
        manifest.gsub!(/rubygem-([a-z])/, '\1')
        manifest.gsub!('openshift-origin-', '')
        manifest.gsub!('mcollective-', 'mco-')
        manifest.gsub!('.noarch', '')
        manifest.gsub!(/\.git\.[a-z0-9\.]+/, '')
        manifest = manifest[0..254]
        puts "Done"
        return manifest
      end

    end # no_tasks end
  end # class end
end # module end

DevOps::BuilderPlugin.start
